DEPLOYMENT_ID = ${tf_deployment_id}
DEPLOY_REGION = ${tf_deploy_region}
EKS_CLUSTER_NAME = ${tf_eks_cluster_name}
FQDN = ${tf_fqdn}
CXONE_VERSION = ${tf_cxone_version}
RELEASE_CHANNEL = ${tf_release_channel}
KOTS_PASSWORD = ${tf_kots_password}
NAMESPACE = ${tf_namespace}
LICENSE_FILE = ${tf_license_file}
KOTS_CONFIG_FILE = ${tf_kots_config_file}
AIRGAP_BUNDLE = ${tf_airgap_bundle}
KOTS_REGISTRY = ${tf_kots_registry}
REGISTRY_USERNAME = ${tf_registry_username}
REGISTRY_PASSWORD = ${tf_registry_password}

# Updates the global kube-config context to the EKS cluster for the environment
.PHONY: update-kubeconfig
update-kubeconfig:
	aws eks update-kubeconfig --name $${EKS_CLUSTER_NAME}

# Bootstraps cluster with required extras and storage configuration
.PHONY: bootstrap-cluster
bootstrap-cluster: 
	make update-kubeconfig
	make apply-storageclass-config
	make install-cluster-autoscaler
	make install-external-dns
	make install-metrics-server
	make install-load-balancer-controller
	sleep 30


# Install kots and deploys the application via online install
.PHONY: kots-install
kots-install:
	kubectl kots install ast/$${RELEASE_CHANNEL} -n $${NAMESPACE} --license-file '$${LICENSE_FILE}' --shared-password '$${KOTS_PASSWORD}' --config-values '$${KOTS_CONFIG_FILE}' --app-version-label $${CXONE_VERSION} --skip-preflights


# Installs kots and stages the application, but does not deploy the application via online install
.PHONY: kots-stage
kots-stage:
	kubectl kots install ast/$${RELEASE_CHANNEL} -n $${NAMESPACE} --license-file '$${LICENSE_FILE}' --shared-password '$${KOTS_PASSWORD}' --app-version-label $${CXONE_VERSION} --skip-preflights --no-port-forward


# Install kots and deploys the application via airgap install
.PHONY: kots-install-from-airgap
kots-install-from-airgap:
	kubectl kots install ast/$${RELEASE_CHANNEL} -n $${NAMESPACE} --license-file '$${LICENSE_FILE}' --shared-password '$${KOTS_PASSWORD}' --config-values '$${KOTS_CONFIG_FILE}' \
	--airgap --airgap-bundle '$${AIRGAP_BUNDLE}' --kotsadm-registry $${KOTS_REGISTRY} --registry-username $${REGISTRY_USERNAME} --registry-password '$${REGISTRY_PASSWORD}' --disable-image-push --skip-preflights

# Installs kots and stages the application, but does not deploy the application via airgap install
.PHONY: kots-stage-from-airgap
kots-stage-from-airgap:
	kubectl kots install ast/$${RELEASE_CHANNEL} -n $${NAMESPACE} --license-file '$${LICENSE_FILE}' --shared-password '$${KOTS_PASSWORD}' --no-port-forward \
	--airgap --airgap-bundle '$${AIRGAP_BUNDLE}' --kotsadm-registry $${KOTS_REGISTRY} --registry-username $${REGISTRY_USERNAME} --registry-password '$${REGISTRY_PASSWORD}' --disable-image-push --skip-preflights


# Pushes the local kots configuration file, kustomization folder, and deploys the application
.PHONY: init-config-and-kustomization
init-config-and-kustomization:
	kubectl kots set config ast -n $${NAMESPACE} --config-file '$${KOTS_CONFIG_FILE}'
	rm -rf ./ast
	kubectl kots download --namespace $${NAMESPACE} --slug ast --decrypt-password-values --overwrite
	rsync -av --progress --checksum --include="*/" --include="*.yaml" --exclude="*" kustomizations/ ast
	kubectl kots upload --namespace $${NAMESPACE} --deploy --slug ast ./ast	


# Performs an upgrade from an airgap bundle
.PHONY: kots-upgrade-from-airgap
kots-upgrade-from-airgap:
	kubectl kots upstream upgrade ast -n $${NAMESPACE} \
	--airgap-bundle '$${AIRGAP_BUNDLE}' \
	--kotsadm-registry $${KOTS_REGISTRY} \
	--registry-username $${REGISTRY_USERNAME} \
	--registry-password '$${REGISTRY_PASSWORD}' --deploy --disable-image-push


# Stages an upgrade from an airgap bundle
.PHONY: kots-stage-upgrade-from-airgap
kots-stage-upgrade-from-airgap:
	kubectl kots upstream upgrade ast -n $${NAMESPACE} \
	--airgap-bundle '$${AIRGAP_BUNDLE}' \
	--kotsadm-registry $${KOTS_REGISTRY} \
	--registry-username $${REGISTRY_USERNAME} \
	--registry-password '$${REGISTRY_PASSWORD}' --disable-image-push


# Downloads the current sequence kots configuration
.PHONY: kots-get-config
kots-get-config:
	kubectl kots get config -n $${NAMESPACE} --appslug ast --decrypt --current


# Uploads the local kots configuration file on the current sequence but does not deploy it
.PHONY: kots-stage-config
kots-stage-config:
	kubectl kots set config ast -n $${NAMESPACE} --config-file '$${KOTS_CONFIG_FILE}' --current


# Uploads the local kots configuration file on the current sequence and triggers a deployment
.PHONY: kots-deploy-config
kots-deploy-config:
	kubectl kots set config ast -n $${NAMESPACE} --config-file '$${KOTS_CONFIG_FILE}' --current --deploy


# Downloads the current sequence kots files
.PHONY: kots-download-files
kots-download-files:
	kubectl kots download --namespace $${NAMESPACE} --slug ast --decrypt-password-values --overwrite --current


# Uploads the local kots files
.PHONY: kots-stage-files
kots-upload-files:
	kubectl kots upload --namespace $${NAMESPACE} --slug ast ./ast


# Uploads and deploys the local kots files
.PHONY: kots-deploy-files
kots-deploy-files:
	kubectl kots upload --namespace $${NAMESPACE} --slug ast ./ast --deploy


# Syncs kustomizations into the kots files and reuploads them to stage a sequence
.PHONY: stage-kustomizations
stage-kustomizations:
	rm -rf ./ast
	kubectl kots download --namespace $${NAMESPACE} --slug ast --decrypt-password-values --overwrite --current
	rsync -av --progress --checksum --include="*/" --include="*.yaml" --exclude="*" kustomizations/ ast
	kubectl kots upload --namespace $${NAMESPACE} --slug ast ./ast


# Syncs kustomizations into the kots files and reuploads them and deploys
.PHONY: deploy-kustomizations
deploy-kustomizations:
	./deploy-kustomizations.sh


# Establishes connection to kots admin console via port forward
.PHONY: kots-admin-console
kots-admin-console:
	kubectl kots admin-console -n $${NAMESPACE}


# Restart all AST services (ignores kots services which are commonly installed in same namespace)
.PHONY: rollout-restart
rollout-restart:
	kubectl rollout restart statefulset ast-platform-rabbitmq -n $${NAMESPACE}
	kubectl rollout status statefulset ast-platform-rabbitmq -n $${NAMESPACE}
	kubectl rollout restart statefulset ast-platform-elasticsearch-master -n $${NAMESPACE}
	kubectl rollout status statefulset ast-platform-elasticsearch-master -n $${NAMESPACE}
	kubectl rollout restart statefulset ast-platform-zeebe -n $${NAMESPACE}
	kubectl rollout status statefulset ast-platform-zeebe -n $${NAMESPACE}
	kubectl rollout restart statefulset ast-platform-cxiam -n $${NAMESPACE}
	kubectl rollout status statefulset ast-platform-cxiam -n $${NAMESPACE}
	kubectl get deploy -n $${NAMESPACE} | grep -i ast | awk '{print $$1}' | xargs -I {} kubectl -n $${NAMESPACE} rollout restart deploy {}


# Creates a secret for image pulling of EKS extra images in kube-system namespace (used for airgap installs)
.PHONY: create-kubesystem-airgap-regcred
create-kubesystem-airgap-regcred:
	kubectl get secret airgap-regcred -n kube-system >/dev/null 2>&1 || \
	kubectl create secret docker-registry airgap-regcred \
	--docker-server=$${KOTS_REGISTRY} \
	--docker-username=$${REGISTRY_USERNAME} \
	--docker-password=$${REGISTRY_PASSWORD} \
	--namespace=kube-system


# Installs the cluster autoscaler using an online install
.PHONY: install-cluster-autoscaler
install-cluster-autoscaler:
	helm repo add autoscaler https://kubernetes.github.io/autoscaler; \
	helm repo update autoscaler; \
	helm upgrade --install cluster-autoscaler autoscaler/cluster-autoscaler \
	--version 9.46.6 \
	-n kube-system \
	--set awsRegion=$${DEPLOY_REGION} \
	--set rbac.serviceAccount.create=true \
	--set rbac.serviceAccount.name=cluster-autoscaler \
	--set rbac.serviceAccount.annotations."eks\.amazonaws\.com/role-arn"="${cluster_autoscaler_iam_role_arn}" \
	--set autoDiscovery.clusterName=$${EKS_CLUSTER_NAME}


# Installs the cluster autoscaler using the image from the airgap bundle via private registry
.PHONY: install-cluster-autoscaler-from-airgap
install-cluster-autoscaler-from-airgap:
	helm repo add autoscaler https://kubernetes.github.io/autoscaler; \
	helm repo update autoscaler; \
	helm upgrade --install cluster-autoscaler autoscaler/cluster-autoscaler \
	--version 9.46.6 \
	-n kube-system \
	--set awsRegion=$${DEPLOY_REGION} \
	--set image.repository="$${KOTS_REGISTRY}/cluster-autoscaler-fips@sha256" \
	--set image.tag="0337a6c5a54a3bf2b8b7f907463f8fa2b2001c88fc948636a08c66ed1e2b8b64" \
	--set rbac.serviceAccount.create=true \
	--set rbac.serviceAccount.name=cluster-autoscaler \
	--set rbac.serviceAccount.annotations."eks\.amazonaws\.com/role-arn"="${cluster_autoscaler_iam_role_arn}" \
	--set autoDiscovery.clusterName=$${EKS_CLUSTER_NAME} \
	--set image.pullSecrets[0]=airgap-regcred


# Uninstalls cluster autoscaler
.PHONY: uninstall-cluster-autoscaler
uninstall-cluster-autoscaler:
	helm uninstall cluster-autoscaler -n kube-system


# Installs the external dns controller using an online install
.PHONY: install-external-dns
install-external-dns:
	helm repo add external-dns https://kubernetes-sigs.github.io/external-dns/; \
	helm repo update external-dns; \
	helm upgrade --install external-dns external-dns/external-dns \
	-n kube-system \
	--version 1.17.0 \
	--set serviceAccount.create=true \
	--set serviceAccount.name=external-dns \
	--set serviceAccount.annotations."eks\.amazonaws\.com/role-arn"="${external_dns_iam_role_arn}" \
	--set txtOwnerId=$${EKS_CLUSTER_NAME}


# Uninstalls external dns
.PHONY: uninstall-external-dns
uninstall-external-dns:
	helm uninstall external-dns -n kube-system


# Installs the load balancer controller using an online install
.PHONY: install-load-balancer-controller
install-load-balancer-controller:
	helm repo add eks https://aws.github.io/eks-charts; \
	helm repo update eks; \
	helm upgrade --install aws-load-balancer-controller eks/aws-load-balancer-controller \
	--version 1.7.1 \
	-n kube-system \
	--set vpcId=${vpc_id} \
	--set region=$${DEPLOY_REGION} \
	--set serviceAccount.create=true \
	--set serviceAccount.name=aws-load-balancer-controller \
	--set serviceAccount.annotations."eks\.amazonaws\.com/role-arn"="${load_balancer_controller_iam_role_arn}" \
	--set clusterName=$${EKS_CLUSTER_NAME} \
	--set enableShield=false \
	--set enableWaf=false \
	--set enableWaafv2=false


# Installs the load balancer controller using the image from the airgap bundle via private registry
.PHONY: install-load-balancer-controller-from-airgap
install-load-balancer-controller-from-airgap:
	helm repo add eks https://aws.github.io/eks-charts; \
	helm repo update eks; \
	helm upgrade --install aws-load-balancer-controller eks/aws-load-balancer-controller \
	--version 1.7.1 \
	-n kube-system \
	--set image.repository="$${KOTS_REGISTRY}/aws-load-balancer-controller-fips@sha256" \
	--set image.tag="a7052943011fdf36416ce72e3eb9529f5795786092135fbe191cfe92d61d14dc" \
	--set vpcId=${vpc_id} \
	--set region=$${DEPLOY_REGION} \
	--set serviceAccount.create=true \
	--set serviceAccount.name=aws-load-balancer-controller \
	--set serviceAccount.annotations."eks\.amazonaws\.com/role-arn"="${load_balancer_controller_iam_role_arn}" \
	--set clusterName=$${EKS_CLUSTER_NAME} \
	--set enableShield=false \
	--set enableWaf=false \
	--set enableWaafv2=false \
	--set imagePullSecrets[0].name=airgap-regcred


# Uninstalls the load balancer controller
.PHONY: uninstall-load-balancer-controller
uninstall-load-balancer-controller:
	helm uninstall aws-load-balancer-controller -n kube-system


# Installs Karpenter using an online install
.PHONY: install-karpenter
install-karpenter:
	helm upgrade --install karpenter oci://public.ecr.aws/karpenter/karpenter \
	--version 1.0.1 \
	-n kube-system \
	--create-namespace \
	--set serviceAccount.create=true \
	--set serviceAccount.name=karpenter \
	--set serviceAccount.annotations."eks\.amazonaws\.com/role-arn"="${karpenter_iam_role_arn}" \
	--set settings.clusterName=$${EKS_CLUSTER_NAME} \
	--set settings.featureGates.spotToSpotConsolidation=true \
	--set settings.interruptionQueue=$${EKS_CLUSTER_NAME}-node-termination-handler \
	--set controller.resources.requests.cpu=1 \
	--set controller.resources.requests.memory=1Gi \
	--set controller.resources.limits.cpu=1 \
	--set controller.resources.limits.memory=1Gi
	kubectl apply -f karpenter.$${DEPLOYMENT_ID}.yaml 


# Uninstalls Karpenter
.PHONY: uninstall-karpenter
uninstall-karpenter:
	helm uninstall karpenter -n kube-system


# Displays single line view of last 2 hours of firewall logs. Only useful in lab environments using the inspection-vpc module.
.PHONY: view-firewall-logs
view-firewall-logs:
	aws logs filter-log-events --start-time $$( [ "$$(uname)" = "Darwin" ] && echo $$(( $$(date -v-2H +%s) * 1000 )) || date -d '2 hours ago' +%s%3N ) --log-group-name /aws/vendedlogs/$${DEPLOYMENT_ID}-aws-nfw-alert | jq -r ' .events[].message' |  jq ' (.event.timestamp + " " + .event.alert.action + ": " + .event.src_ip + ":" + (.event.src_port|tostring) + " -> " + .event.proto + "/" + .event.app_proto + " "  + .event.dest_ip + ":" + (.event.dest_port|tostring) + " " + .event.tls.sni + .event.http.hostname) + " " + .event.http.http_user_agent + " " + .event.http.http_method + " " + .event.http.url'


# Applys the storage class configuration to the EKS cluster
.PHONY: apply-storageclass-config
apply-storageclass-config:
	./apply-storageclass-config.$${DEPLOYMENT_ID}.sh


# Applys the target group binding to the EKS cluster
.PHONY: apply-target-group-binding
apply-target-group-binding:
	./apply-target-group-binding.$${DEPLOYMENT_ID}.sh


# Installs metrics server using an online install
.PHONY: install-metrics-server
install-metrics-server:
	kubectl apply -f https://github.com/kubernetes-sigs/metrics-server/releases/latest/download/components.yaml


# Installs the metrics server using the image from the airgap bundle via private registry
.PHONY: install-metrics-server-from-airgap
install-metrics-server-from-airgap:
	helm repo add metrics-server https://kubernetes-sigs.github.io/metrics-server/; \
	helm repo update metrics-server; \
	helm upgrade --install metrics-server metrics-server/metrics-server \
	-n kube-system \
	--set image.repository="$${KOTS_REGISTRY}/metrics-server-fips@sha256" \
	--set image.tag="336b1c5f06733aa7476162585655a6183e2b0b7aa4c597e2adcff0016c9d9883" \
	--set imagePullSecrets[0].name=airgap-regcred


# Cleans kots resources from the namespace
.PHONY: clean-kots
clean-kots:
	kubectl delete statefulset kotsadm-rqlite -n $${NAMESPACE} --ignore-not-found
	kubectl delete deployment kotsadm -n $${NAMESPACE} --ignore-not-found
	kubectl delete statefulset kotsadm-minio -n $${NAMESPACE} --ignore-not-found


# Cleans the entire namespace of all resources
.PHONY: clean-ast-namespace
clean-ast-namespace:
	kubectl patch service ast-platform-traefik -n $${NAMESPACE} -p '{"metadata":{"finalizers":null}}' || true
	kubectl patch crd microfrontends.ast.checkmarx.com -n $${NAMESPACE} -p '{"metadata":{"finalizers":[]}}' --type=merge || true
	kubectl patch crd microservices.ast.checkmarx.com -n $${NAMESPACE} -p '{"metadata":{"finalizers":[]}}' --type=merge || true
	kubectl patch crd platforms.ast.checkmarx.com -n $${NAMESPACE} -p '{"metadata":{"finalizers":[]}}' --type=merge || true
	kubectl delete crd microfrontends.ast.checkmarx.com -n $${NAMESPACE} || true
	kubectl delete crd microservices.ast.checkmarx.com -n $${NAMESPACE} || true
	kubectl delete crd platforms.ast.checkmarx.com -n $${NAMESPACE} || true
	kubectl delete bundles.trust.cert-manager.io trust-bundle || true
	helm uninstall trust-manager cert-manager -n $${NAMESPACE} || true
	helm uninstall operator-helm-chart -n $${NAMESPACE} || true
	kubectl delete -n $${NAMESPACE} --all all || true
	kubectl delete ns $${NAMESPACE} || true


# Deletes the load balancer controller managed resources
.PHONY: destroy-load-balancer
destroy-load-balancer:
	./destroy-load-balancer.$${DEPLOYMENT_ID}.sh


# Generates a support bundle for the cluster
.PHONY: get-support-bundle
get-support-bundle:
	kubectl support-bundle --load-cluster-specs --redactors=configmap/ast/kotsadm-redact-spec/redact-spec,configmap/ast/kotsadm-ast-redact-spec/redact-spec


# Generates a totp code from the secret stored in .totp. Useful in lab enviornments only.
.PHONY: totp
totp:
	cat .totp | totp-cli instant
